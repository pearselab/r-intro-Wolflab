source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
## Functions
## = abundance function is lovely! :D
abundance <- function(p, lam) {
if(rbinom(1, 1, p) == 1){
return(rpois(1, lam))
}else{
return(0)
}
}
## Don't use absolute paths in GitHub
## - header=TRUE is the default for read.csv; as.is=TRUE is a good idea!
species.data <- read.csv("species_list.csv", as.is=TRUE)
## Load your sim.comm function
sim.comm <- function(species.list, p.list, lam.list, n.sites){
my.abundance.matrix <- matrix(data = 0, nrow = n.sites, ncol = length(species.list)) # make empty matrix
colnames(my.abundance.matrix) <- species.list # assign column names from the species list
#print(my.abundance.matrix) # just checking - empty matrix good
for(k in 1:length(species.list)){
for(j in 1:n.sites){ # now looping across n.sites
my.abundance.matrix[j,k] <- abundance(p.list[k], lam.list[k])
}
}
return(my.abundance.matrix)
}
## Two different ways of calling your function using this data.frame that are:
## * easier to read
## * require less code
## - "with" is in the exercises of lesson 1
print (sim.comm(species.data$Species, species.data$p, species.data$lambda, 4))
with(species.data, sim.comm(Species, p, lambda, 4))
abundance <- function(p, lam) {
if(rbinom(1, 1, p) == 1){
return(rpois(1, lam))
}else{
return(0)
}
}
## Don't use absolute paths in GitHub
## - header=TRUE is the default for read.csv; as.is=TRUE is a good idea!
species.data <- read.csv("species_list.csv", as.is=TRUE)
## Load your sim.comm function
sim.comm <- function(species.list, p.list, lam.list, n.sites){
my.abundance.matrix <- matrix(data = 0, nrow = n.sites, ncol = length(species.list)) # make empty matrix
colnames(my.abundance.matrix) <- species.list # assign column names from the species list
#print(my.abundance.matrix) # just checking - empty matrix good
for(k in 1:length(species.list)){
for(j in 1:n.sites){ # now looping across n.sites
my.abundance.matrix[j,k] <- abundance(p.list[k], lam.list[k])
}
}
return(my.abundance.matrix)
}
## Two different ways of calling your function using this data.frame that are:
## * easier to read
## * require less code
## - "with" is in the exercises of lesson 1
#print (sim.comm(species.data$Species, species.data$p, species.data$lambda, 4))
with(species.data, sim.comm(Species, p, lambda, 4))
source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
source('~/Dropbox/docs_wolf/Python_files/2016_Programming/r-intro-Wolflab/abund_test.R')
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f
with(my.vect, mult.by.three)
mult.by.three <- function(x){
return(x*3)
}
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three) #arghhh. Failed on 7th attempt.
mult.by.three <- function(x){
return(x*3)
}
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three())
with(my.vect, mult.by.three(my.vect)) #arghhh. Failed on 7th attempt.
mult.by.three <- function(x){
return(x*3)
}
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three(my.vect))
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three()) #arghhh. Failed on 7th attempt. Obviously missing something
paul <- with(my.vect, *3)
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three()) #arghhh. Failed on 7th attempt. Obviously missing something
paul <- with(my.vect, 3)
mult.by.three <- function(x){
return(x*3)
}
my.vect <- c(4,5,6,7,8,9)
f <- my.vect*3
f # that was easy
# Let's try with with
with(my.vect, mult.by.three()) #arghhh. Failed on 7th attempt. Obviously missing something
paul <- with(my.vect, f)
?with
list.files(getwd())
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
install.packages("ggplot2")
setwd("/Users/emilysessa/Dropbox/Research/01 Computation/01 all r files/fern genome skimming")
list.files(getwd())
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
install.packages("wesanderson")
install.packages("gridExtra")
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="stacked.pdf")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack', width=.5) +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack', width = 1.5) +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack', width = 2.5) +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack', width = 2) +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
#pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
library(ggplot2)
library(wesanderson)
library(gridExtra)
############## FOR STACKED BAR GRAPHS ###################
## read in data
data <- read.csv("repeat2.csv", header=TRUE)
## set color scheme
ordered = c("#C6CDF7", "#675599", "#956D34", "#D6CABF", "#D69FA0", "#308BC4", "#75CAE5", "#00A08A", "#77A63B", "#E5DC21", "#F2AD00", "#F98400")
## Make a variable to set the order of the facets, in this case by species. If you don't want to do this, in the ggplot code do ( ! species) insted of species_f. Can use this to order them in any way you want.
data$species_f = factor(data$species, levels=c('Ceratopteris', 'Cystopteris', 'Dipteris', 'Plagiogyria', 'Polypodium', 'Pteridium', 'Amborella', 'Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## In this one they're ordered by genome size, ferns then seed plants (same as phylogeny in scatterplot)
#data$species_f = factor(data$species, levels=c('Polypodium', 'Cystopteris', 'Ceratopteris', 'Pteridium', 'Plagiogyria', 'Dipteris', 'Amborella','Vitis', 'Zea', 'Gnetum','Pinus','Taxus'))
## barplot1 - One possible ordering of classes within the bar graph
#data$class = factor(data$class, levels=c('Non-repetitive', 'Satellite', 'RC', 'Simple_repeat', 'rRNA', 'LTR_Other','LTR_Gypsy', 'LTR_Copia', 'Low complexity', 'LINE', 'DNA', 'Unknown_repeat'))
## barplot2 - Another order, this ends up looking better:
data$class = factor(data$class, levels=c('Non repetitive', 'LINE', 'LTR (Other)','LTR (Gypsy)', 'LTR (Copia)', 'rRNA', 'Satellite', 'Simple repeat', 'Low complexity','Rolling Circle', 'DNA transposons', 'Unknown repeat'))
## ggplot code to make the actual figure
#pdf(file="Paul_play.pdf", paper="USr")
ggplot() +
geom_bar(data=data, aes(y = proportion, x = run, fill = class, order=-as.numeric(class)), stat="identity", position='stack') +
theme_bw() +
theme(strip.text.x=element_text(size=8, face="italic")) +
facet_grid( ~ species_f) + scale_fill_manual(values= ordered) +
labs(x="Sample number", y="% of genome")
dev.off()
dev.off()
